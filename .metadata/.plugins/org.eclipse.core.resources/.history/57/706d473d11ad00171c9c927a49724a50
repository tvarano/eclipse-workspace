import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

//Thomas Varano
//Aug 31, 2017

public class Reader
{
   private File schedDoc;
   private static boolean debug = false, statusU = true;
   
   public Reader() {
      this.schedDoc = new File(SchedWriter.FILE_ROUTE);
   }
   
   public Schedule readDefaultSchedule() {
      try {
         Scanner s = new Scanner(schedDoc);
         if (statusU) System.out.println("reading: "+SchedWriter.FILE_ROUTE);
         return readAndReturn(s);
      }
      catch (FileNotFoundException e) {
         if (statusU){
            System.err.println(e);
            System.out.println("creating file:" + SchedWriter.FILE_ROUTE);
         }
         rewriteSched();
      }
      if (statusU) System.out.println("reader RETRYING READ");
      return readDefaultSchedule();
   }
   
   private void rewriteSched() {
      SchedWriter w = new SchedWriter();
      Schedule defSched = new Schedule(Rotation.R1.getTimes(), Lab.LAB1);
      w.writeSchedule(defSched);
   }
   
   public Schedule readAndOrderSchedule(Rotation r) {
      Schedule sched = readDefaultSchedule();
      sched.setClasses(reorderClasses(r, sched.getClasses()));
      return sched;
   }
      
   private Schedule readAndReturn(Scanner s) {
      if (debug) System.out.println("read called");
      if (!s.hasNextLine())
         rewriteSched();
      String line = s.nextLine();
      Lab[] labs = readLabs(line);
      ClassPeriod[] classArray = readClasses(s);
      Schedule retval = new Schedule(classArray, labs);
      if (debug) System.out.println("sched created");
      retval.setLabSlots(assignLabClassRooms(labs, retval));
      return retval;
   }
   
   private Lab[] readLabs(String line) {
      if (debug) System.out.println("labs read");
      Lab[] labs;
      if (!line.equals(";")) {
         int labSlot = Integer.parseInt(line.substring(0, line.indexOf(';')));
         int labSlotLength = line.substring(0,line.indexOf(';')).length();
         labs = new Lab[labSlotLength];
         for (int i = 1, index = 0; index < labs.length; i++, index++) {
            int multiplier = (int)Math.pow(10, i);
            labs[index] = Lab.toLab((int)(labSlot % multiplier));
            labSlot /= multiplier;
         }
         if (debug) System.out.println("lab "+labSlot+"="+labs[0]);
      }
      else labs = new Lab[0];
      if (debug) System.out.println(labs[0]);
      return labs;
   }
   
   private Lab[] assignLabClassRooms(Lab[] labs, Schedule s) {
      if (debug) System.out.println("LABS ASSIGNED");
      for (Lab l : labs) {
         l.getTimeAtLab().setSlot(s.indexOf(l.getClassSlot()));
         if (debug) System.out.println(l.getClassSlot() + "=" + l.getTimeAtLab().getInfo());
      }
      return labs;
   }
   
   private ClassPeriod[] readClasses(Scanner s) {
      if (debug) System.out.println("classes read");
      String line = "";
      ArrayList<ClassPeriod> classes = new ArrayList<ClassPeriod>();
      int timeIndex = 0;
      ClassPeriod timeTemplate = null;
      while (s.hasNextLine()) {
         line = s.nextLine();
         if (debug)
            System.out.println("LINE" + line);
         int slot = Integer.parseInt(line.charAt(0)+"");
         String className = line.substring(line.indexOf('[')+1,
               line.indexOf(']'));
         String roomNumber = line.substring(line.indexOf(']')+1, line.indexOf('|'));
         String teacher = line.substring(line.indexOf('|')+1, line.indexOf(';'));
         if (slot == 0) 
            timeTemplate = Rotation.PERIOD_ZERO;         
         else if (slot == 8)
            timeTemplate = Rotation.PERIOD_EIGHT;
         else {
            timeTemplate = Rotation.R1.getTimes()[timeIndex];
            timeIndex++;
         }
         classes.add(new ClassPeriod(slot, className, timeTemplate.getStartTime(), timeTemplate.getEndTime(), teacher, roomNumber));
         if (debug) System.out.println("\tclassPeriod"+slot+"= "+classes.get(classes.size()-1));
      }
      ClassPeriod[] classArray = new ClassPeriod[0];
      classArray = classes.toArray(classArray);
      return classArray;
   }
   
   public static void reorderClasses(Rotation r, Schedule s, ClassPeriod[] template) {
      if (statusU) System.out.println("ordering schedule: "+s.getName());
      ClassPeriod[] newArray = reorderClasses(r, template);
      s.setClasses(newArray);
   }
   
   public static ClassPeriod[] reorderClasses(Rotation r, ClassPeriod[] oldArray) {
      if (statusU) System.out.println("ordering class array...");
      int extraClasses = oldArray.length - Rotation.R1.getTimes().length;
      ClassPeriod[] newArray = new ClassPeriod[r.getTimes().length+extraClasses];
      int[] order = Rotation.getSlotRotation(r);
      //check for zero period, etc.
      int arrayStart = 0; 
      int newArrayIndex = 0, rotationIndex = 0;
      for (int i = 0; i < oldArray.length; i++) {
         if (oldArray[i].getSlot() == 0) {
            newArray[0] = oldArray[i];
            newArrayIndex++;
            arrayStart++;
         }
         else if (oldArray[i].getSlot() == 8)
            newArray[newArray.length-1] = oldArray[i];
      }
      
      //every other class
      for (int i = 0; i < order.length; i++) {
         if (debug) System.out.println("order run "+i);
         for (int o = arrayStart; o < oldArray.length; o++) {
            if (order[i] == oldArray[o].getSlot()) {
               newArray[newArrayIndex] = new ClassPeriod(oldArray[o].getSlot(), oldArray[o].getName(),
                     r.getTimes()[rotationIndex].getStartTime(), r.getTimes()[rotationIndex].getEndTime(), 
                     oldArray[o].getTeacher(), oldArray[o].getRoomNumber());
               
               if (debug) {
                  System.out.println("new array["+newArrayIndex+"] set to old["+o);
                  System.out.println("\tindex is; "+oldArray[o].getSlot());
               }
               newArrayIndex++;
               rotationIndex++;
            }
            //TODO for now... make sure to have them write their own pascack.
         }
         if (order[i] == ClassPeriod.PASCACK) {
            if (debug) System.out.println("entering pascack...");
            newArray[newArrayIndex] = Rotation.getPascack();
            newArrayIndex++;
            rotationIndex++;
         }
      }
      return newArray;
   }
   
   public File getSchedDoc() {
      return schedDoc;
   }
   public void setSchedDoc(File schedDoc) {
      this.schedDoc = schedDoc;
   }

   public static void main(String[] args) {
      Reader r = new Reader();
//      Schedule s = r.readDefaultSchedule();
      Schedule s = r.readAndOrderSchedule(Rotation.EVEN_BLOCK);
      System.out.println("FINAL ORDER:");
      for (ClassPeriod c : s.getClasses()) {
         System.out.println("\t" +c);
      }
      for (Lab l : s.getLabSlots()) {
         System.out.println(l);
         System.out.println("per"+l.getTimeAtLab().getInfo());
      }
   }
}
