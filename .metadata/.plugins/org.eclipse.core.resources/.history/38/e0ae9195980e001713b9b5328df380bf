import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;

import javax.swing.JPanel;

//Thomas Varano
//[Program Descripion]
//Mar 15, 2017

public class OpeningCutscene
extends JPanel
implements ActionListener
{
   private static final long serialVersionUID = 1L;
   private final int PREF_W = 700, PREF_H = 800, SECTION_W = 50;
   private final Platform GOD_PLATFORM = new Platform(0,0,SECTION_W*13,25);
   private final Ladder GOD_LADDER = new Ladder(0,0,25,Ladder.BOUND_UP,GOD_PLATFORM);
   private RenderingHints hints = new RenderingHints(
         RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
   
   private ArrayList<Ladder> ladders = new ArrayList<Ladder>();
   private ArrayList<Platform> platforms = new ArrayList<Platform>();
   private Long startTime;
   
   private CutsceneNPC boss, princess;
   private int level, amountStomp;
   
   public OpeningCutscene(){
      setBackground(Color.BLACK);
      setForeground(Color.WHITE);
      GOD_PLATFORM.setColor(Color.RED);
      GOD_LADDER.setColor(Color.CYAN);
      //double x, double y, double width, double height, double maxSpeed, File script
      boss = new CutsceneNPC(SECTION_W*6,PREF_H-SECTION_W*1.5,SECTION_W*3,SECTION_W*1.5,5,)
      
      level = 1;
      
      setFocusable(true);
      requestFocus();
   }
   
   protected void paintComponent(Graphics g){
      super.paintComponent(g);
      Graphics2D g2 = (Graphics2D) g;
      g2.setRenderingHints(hints);
      for (Platform currentPlatform : platforms)
         currentPlatform.draw(g2);
      boss.draw(g2);
   }
   
   public void shake(){
      if (amountStomp>0 && amountStomp<6 || amountStomp == 7)
         platforms.get(amountStomp).rotateAndBreakWithStep(3, SECTION_W);
      amountStomp--;
      if(amountStomp<1)
         initLadders();
   }
   
   public void initPlatforms(){
      //0
      platforms.add(new Platform(
            0,PREF_H-25,SECTION_W*6,GOD_PLATFORM.getHeight()));
      //1
      platforms.add(new Platform(
            platforms.get(0).getWidth(),platforms.get(0).getY(),SECTION_W*8,GOD_PLATFORM.getHeight()));
      platforms.get(1).setDegreeRotation(-2);
      //2
      platforms.add(new Platform(
            0,platforms.get(1).getY()-128,GOD_PLATFORM.getWidth(),GOD_PLATFORM.getHeight()));
      platforms.get(2).setDegreeRotation(2);
      //3
      platforms.add(new Platform(
            SECTION_W,platforms.get(2).getY()-70,GOD_PLATFORM.getWidth(),GOD_PLATFORM.getHeight()));
      platforms.get(3).setDegreeRotation(-2);
      //4
      platforms.add(new Platform(
            0,platforms.get(3).getY()-145,GOD_PLATFORM.getWidth(),GOD_PLATFORM.getHeight()));
      platforms.get(4).setDegreeRotation(2);
      //5
      platforms.add(new Platform(
            SECTION_W,platforms.get(4).getY()-70,GOD_PLATFORM.getWidth(),GOD_PLATFORM.getHeight()));
      platforms.get(5).setDegreeRotation(-2);
      //6
      platforms.add(new Platform(
            0,platforms.get(5).getY()-120,SECTION_W*8,GOD_PLATFORM.getHeight()));
      //7
      platforms.add(new Platform(
            platforms.get(6).getWidth(),platforms.get(6).getY(),SECTION_W*5,GOD_PLATFORM.getHeight()));
      platforms.get(7).setDegreeRotation(2);
      //8 (peach's platform)
      platforms.add(new Platform(
            (int)(SECTION_W*5.5),platforms.get(6).getY()-85,SECTION_W*3,GOD_PLATFORM.getHeight()));

      System.out.println(platforms.get(0).getY()-175);
      for (Platform currentPlatform : platforms){
         currentPlatform.setColor(GOD_PLATFORM.getColor());
         System.out.println(platforms.get(3).getWidth());
      }
   }
   
   public void initLadders(){
      //TODO cant call for any number for width, have to just write it in
      ladders.add(new Ladder(
            SECTION_W*5,25,15,Ladder.BOUND_UP,platforms.get(2).getSection(5)));
      ladders.add(new Ladder(
            SECTION_W*5,25,30,Ladder.BOUND_DOWN,platforms.get(0)));
      ladders.add(new Ladder(
            //section_w*12
            platforms.get(1).getSection(6).getX(),25,
            platforms.get(1).getSection(5),platforms.get(2).getSection(11),true));
      ladders.add(new Ladder(
            SECTION_W*6,25,platforms.get(2).getSection(6),platforms.get(3).getSection(5)));
      ladders.add(new Ladder(
            SECTION_W*2,25,platforms.get(2).getSection(2),platforms.get(3).getSection(1)));
      ladders.add(new Ladder(
            SECTION_W*4,25,20,Ladder.BOUND_UP,platforms.get(4).getSection(4)));
      ladders.add(new Ladder(
            SECTION_W*4,25,30,Ladder.BOUND_DOWN,platforms.get(3).getSection(3)));
      ladders.add(new Ladder(
            SECTION_W*7,25,platforms.get(3).getSection(6),platforms.get(4).getSection(7)));
      ladders.add(new Ladder(
            SECTION_W*12,25,platforms.get(3).getSection(10),platforms.get(4).getSection(11),true));
      ladders.add(new Ladder(
            SECTION_W*11,25,30,Ladder.BOUND_DOWN,platforms.get(4).getSection(10),true));
      ladders.add(new Ladder(
            SECTION_W*11,25,20,Ladder.BOUND_UP,platforms.get(5).getSection(9),true));
      ladders.add(new Ladder(
            SECTION_W*5,25,platforms.get(4).getSection(4),platforms.get(5).getSection(3),true));
      ladders.add(new Ladder(
            SECTION_W*2,25,platforms.get(4).getSection(2),platforms.get(5).getSection(1)));
      ladders.add(new Ladder(
            SECTION_W*6,25,40,Ladder.BOUND_DOWN,platforms.get(5).getSection(4),true));
      ladders.add(new Ladder(
            SECTION_W*6,25,15,Ladder.BOUND_UP,platforms.get(6),true));
      ladders.add(new Ladder(
            SECTION_W*12,25,platforms.get(5).getSection(10),platforms.get(7).getSection(3),true));
      ladders.add(new Ladder(
            platforms.get(8).getX()+platforms.get(8).getWidth(),25,platforms.get(7).getSection(0),platforms.get(8),true));
      //endless ladders
      ladders.add(new Ladder(
            platforms.get(8).getX(),25,150,Ladder.BOUND_DOWN,platforms.get(6),true));
      ladders.add(new Ladder(
            SECTION_W*4,25,150,Ladder.BOUND_DOWN,platforms.get(6)));
      
      for (Ladder currentLadder : ladders){
         currentLadder.setColor(GOD_LADDER.getColor());
      }
   }
  
   public void update(){
      if (level == 1){
         initPlatforms();
         
         shake();
         if (amountStomp == 6)
            amountStomp = 5;
      }
   }
   
   public Dimension getPreferredSize() {
      return new Dimension(PREF_W, PREF_H);
   }
   
   @Override
   public void actionPerformed(ActionEvent e) {
      update();
      repaint();
   }
}
