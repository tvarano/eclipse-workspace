//Thomas Varano
//Aug 31, 2017

/**
 * gonna hold everything. array of classes, lab day
 * @author varanoth
 * 
 */
public class Schedule
{ 
   public static final int NORMAL_AMT_DAYS = 7;
   private ClassPeriod[] classes;
   private ClassPeriod schoolDay;
   private Lab[] labSlots;
   private boolean debug = false;
   private String name;
   
   public Schedule(int amountClasses, Lab[] labSlots) {
      this(new ClassPeriod[amountClasses], labSlots);
   }
   
   public Schedule (ClassPeriod[] classes, Lab[] labSlots) {
      if (debug) System.out.println("SCHED INITIALIZED:size="+classes.length);
      this.setClasses(classes); this.setLabSlots(labSlots);
      if (classes.length > 0)
         schoolDay = new ClassPeriod(
            -1, "schoolDay", classes[0].getStartTime(), 
            classes[classes.length-1].getEndTime(), ClassPeriod.NO_TEACH, ClassPeriod.NO_ROOM);
      else
         schoolDay = new ClassPeriod();
      name = "unNamedSchedSize"+classes.length;
   }
   
   public Schedule(ClassPeriod[] classes, Lab labSlot) {
      this(classes, new Lab[]{labSlot});
   }
   
   public Schedule(int amountClasses, Lab labSlot) {
      this(new ClassPeriod[amountClasses], labSlot);
   }
   
   public Schedule() {
      this(0,Lab.LAB1);
   }
   
   /**
    * @deprecated I'm pretty sure we dont need this.
    * The reader does pretty much everything
    * @param rotation
    * @param names
    * @param labSlot
    * @param zeroPeriod
    * @param periodEight
    * @return
    */
   public static ClassPeriod[] createSchedule(
         Rotation rotation, String[] names, Lab labSlot, boolean zeroPeriod, boolean periodEight) {
      ClassPeriod[] retval = new ClassPeriod[NORMAL_AMT_DAYS];
      if(zeroPeriod)
         retval = new ClassPeriod[retval.length+1];
      if (periodEight)
         retval = new ClassPeriod[retval.length+1];
      int rotationIndex = 0;
      for (int slot = 0; slot < retval.length; slot++) {
         if (zeroPeriod && slot == 0) 
            retval[slot] = new ClassPeriod(slot, names[slot], 
                  Rotation.PERIOD_ZERO.getStartTime(), Rotation.PERIOD_ZERO.getEndTime());
         if (periodEight && slot == 8)
            retval[slot] = new ClassPeriod(slot, names[slot], 
                  Rotation.PERIOD_EIGHT.getStartTime(), Rotation.PERIOD_EIGHT.getEndTime());
         else {
            retval[slot] = new ClassPeriod(slot, names[slot],
                  rotation.getTimes()[rotationIndex].getStartTime(), rotation.getTimes()[rotationIndex].getEndTime());
            rotationIndex++;
         }
      }
      return retval;
   }
   
   public ClassPeriod classAt(Time t) {
      for (ClassPeriod c : classes)
         if (c.contains(t))
            return c;
      return null;
   }
   
   public Schedule clone() {
      if (debug) System.out.println(name+" cloned");
      Schedule retval = new Schedule();
      retval.setClasses(classes);
      retval.setLabSlots(getLabSlots());
      retval.setName(getName()+"Clone");
      return retval;
   }
   
   public ClassPeriod get(String name) {
      for (ClassPeriod c : classes) 
         if (c.getName().equalsIgnoreCase(name))
            return c;
      return null;
   }
   
   public ClassPeriod get(int slot) {
      for (ClassPeriod c : classes)
         if (c.getSlot() == slot)
            return c;
      return null;
   }
   
   public int indexOf(ClassPeriod c) {
      for (int i = 0; i < classes.length; i++)
         if (c == classes[i])
            return i;
      return -1;
   }
   
   public int indexOf(int slot) {
      for (int i = 0; i <classes.length; i++)
         if (classes[i].getSlot() == slot)
            return i;
      return -1;
   }

   public String classInfoString() {
      String retval = "";
      for (ClassPeriod c : classes)
         retval += c.getInfo() + ", ";
      return retval;
   }
   
   public String classString(boolean enter, boolean tab) {
      String retval = "";
      String newLn = (enter) ? "\n" : "";
      String tabLn = (tab) ? "\t" : "": 
      for (ClassPeriod c : classes)
         retval += c.toString() +", ";
      return retval;
   }
   
   public String toString() {
      return getClass().getName()+"[amtClasses="+classes.length+" starts:"+schoolDay.getStartTime()
      +" ends:"+schoolDay.getEndTime()+"]";
   }
   public ClassPeriod[] getClasses() {
      return classes;
   }
   public void setClasses(ClassPeriod[] classes) {
      this.classes = classes;
   }
   public Lab[] getLabSlots() {
      return labSlots;
   }
   public void setLabSlots(Lab[] labSlots) {
      this.labSlots = labSlots;
   }
   public static int getNormalAmtDays() {
      return NORMAL_AMT_DAYS;
   }
   public ClassPeriod getSchoolDay() {
      return schoolDay;
   }
   public String getName() {
      return name;
   }
   public void setName(String name) {
      this.name = name;
   }
}
