//Thomas Varano

package december;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

/**
 * ACSL contest #1
 * @author Thomas Varano
 *
 */
public class ACSLCards
{
   /*
    * initialize card types
    * player gets 5 cards and the remaining cards are placed face down on the pile
    * an initial point total will be given
    * each player puts down one card
    * the player adds their value to the total and selects another card from the pile
    * each card adds value
    *    EXCEPT
    *    9 is pass
    *    T (ten) subtracts 10
    *    7 adds either 1 or 7. adds 7 unless points will go over 100, then adds 1
    *    crossing point borders 
    *       33 - 34, 55 - 56, 77 - 78
    *          in either direction
    *       adds an additional 5 points
    *             ASK IF YOU GO DOWN AND ADD AND THEN GO BACK UP DOES IT STILL COUNT
    *    rules for playing cards
    *       play the card that is the median point value of the 5 cards. 
    *       
    *       the game ends when the card played puts the point total over 99
    */
   
   /*
    * MY NOTES
    * sort the hands, create a subclass called "card", has a compareTo
    * 
    * input 
    *    player one cards, player 2 cards
    *    starting points, then cards picked up
    */
   
  
   private static final Character[] cardValues = {'2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'};
  
   public static void main(String[] args) {
      //read all data, store as string
      Scanner in = new Scanner(System.in);
         //first line, read and format                   CHECKED
      System.out.println("Enter line 1");
      String rawData = in.nextLine();
      StringBuilder p1Values = new StringBuilder();
      StringBuilder p2Values = new StringBuilder();
      final int handSize = 5;
      final ArrayList<Card> p1Start = new ArrayList<Card>();
      final ArrayList<Card> p2Start = new ArrayList<Card>();
      int index = 0;      
      // format strings
      StringBuilder playerString = p1Values;
      for (int i = 0; i < handSize * 2; i++) {
         if (i == handSize)
            playerString = p2Values;
         String addition = (rawData.indexOf(", ", index) == -1)
               ? rawData.substring(index)
               : rawData.substring(index, rawData.indexOf(", ", index));
               playerString.append(addition);
         index += addition.length() + ", ".length();
      }
      for (int i = 0; i < handSize; i++) {
         p1Start.add(new Card(p1Values.toString().charAt(i)));
         p2Start.add(new Card(p2Values.toString().charAt(i)));
      }
      //TODO code until here works 100%
      //Start loop here
      final int amtLines = 6;
      int linesDone = 1;
      while (linesDone < amtLines) {
         ArrayList<Card> p1 = new ArrayList<Card>(); p1.addAll(p1Start);
         ArrayList<Card> p2 = new ArrayList<Card>(); p2.addAll(p1Start);
         // read data for the game
         System.out.println("Enter line " + (linesDone + 1));
         rawData = in.nextLine();
         index = 0;
         int pts = Integer.parseInt(rawData.substring(0, rawData.indexOf(',')));
         final int amtCards = 10;
         Card[] pile = new Card[amtCards];
         for (int i = 2; i < rawData.length(); i++) {
            if (rawData.charAt(i) != ',' && rawData.charAt(i) != ' ') {
               pile[index] = new Card(rawData.charAt(i));
               index++;
            }
         }
         int pileIndex = 0;
         // play game
         final String[] playerNames = {"Player 1", "Player 2"};
         final int[] borders = {33, 55, 77};
         int currentPlayer = 1;
         final int goal = 100;
         while (pts < goal) {
            currentPlayer = (currentPlayer == 0) ? 1 : 0;
            int begin = pts;
            ArrayList<Card> playerHand = (currentPlayer == 0) ? p1 : p2;
            int addition = findMedian(playerHand).getPtVal();
            playerHand.add(pile[pileIndex]);
            pileIndex++;
            //checking for 7
            if (addition == 7 && goal - pts <= 7)
               addition = 1;
            pts += addition;
            System.out.println(pts);
            System.out.println("+" +addition);
            
            // checking for borders, first up then down
            for (int i : borders) {
               if (begin < i && pts > i)
                  pts += 5;
               else if (begin > i && pts < i)
                  pts += 5;
            }
         }
         System.out.println("Winner: "+playerNames[currentPlayer] + " at "+pts);
         
         linesDone++;
      }
              
      in.close();
      System.exit(0);
   }
   
   /*
    * SAMPLE input
    * 8, 9, Q, 6, 7, K, A, 5, 9, 8
    * 75, J, 7, Q, T, A, 6, 2, 3, 4, 5
    * 50, 7, K, T, 8, 3, Q, 9, 7, 2, 3
    */
   
   private static Card findMedian(ArrayList<Card> list) {
      Collections.sort(list);
      return list.get(3);
   }
   
   private static class Card implements Comparable<Card> {
      public static int[] pts = {2, 3, 4, 5, 6, 7, 8, 0, -10, 11, 12, 13, 14};
      private char value;
      public Card(char value) {
         this.value = value;
      }
      public int getPtVal() {
         return pts[Arrays.asList(cardValues).indexOf(value)];
      }
      @Override
      public int compareTo(Card arg0) {
         return Arrays.asList(cardValues).indexOf(value) - Arrays.asList(cardValues).indexOf(arg0.value);
      }
      public String toString() {
         return getClass().getName() + "["+value + "]";
      }
   }
}
