import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.AbstractButton;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SpringLayout;
import javax.swing.SwingUtilities;

//Thomas Varano
//[Program Descripion]
//Sep 20, 2017

public class ClassInputSlot extends JPanel implements ActionListener
{
   private static final long serialVersionUID = 1L;
   private static final int gap = 5;
   private int slotNumber;
   private Container parentPanel;
   private boolean hasParent, canCreate, hasLab, error, removable, debug;
   private JTextField[] promptFields;
   
   public ClassInputSlot(int slotNumber, Container parentPanel) {
      this (new ClassPeriod(slotNumber), parentPanel);
      if (debug)
         System.out.println("input slot "+slotNumber+" initialized empty");
   }
   
   public ClassInputSlot(ClassPeriod c, Container parentPanel) {
      if (c == null) c = new ClassPeriod();
      debug = false;
      setSlotNumber(c.getSlot());
      canCreate = true; hasLab = false; 
      removable = (slotNumber == 0 || slotNumber == 8);
      if (parentPanel instanceof ScheduleInput) {
         this.parentPanel = (ScheduleInput)parentPanel;
          hasParent = true;
      }
      else
         this.parentPanel = parentPanel;
      int amtFields = 3;
      promptFields = new JTextField[amtFields];
      setLayout(new SpringLayout());
      addAndSort(c);
      
   }
   
   private void addAndSort(ClassPeriod c) {
      int index = 0;
      SpringLayout l = (SpringLayout) getLayout();
      JLabel labelLeft = new JLabel(slotNumber+"-");              //label for the class slot MAKE THIS BOLD
      labelLeft.setFont(getFont().deriveFont(Font.BOLD));
      add(labelLeft);
      l.putConstraint(SpringLayout.WEST, labelLeft, gap*2, SpringLayout.WEST, this);
      setNorthBound(labelLeft);
      
      JLabel currentLabel = new JLabel("Class Name");             // class name prompt
      addLabel(currentLabel, labelLeft, l, index);
      
      JTextField currentField = new JTextField(c.getName()); //class name field
      addField(currentField, currentLabel, l, index);
      index++;
      
      currentLabel = new JLabel("Teacher:");                      //teacher prompt
      addLabel(currentLabel, currentField, l, index);
      
      currentField = new JTextField(c.getTeacher());              //teacher field
      addField(currentField, currentLabel, l, index); 
      index++;
      
      currentLabel = new JLabel("Room:");                  // rm number prompt
      addLabel(currentLabel, currentField, l, index);
      
      currentField = new JTextField(c.getRoomNumber());                       //rm number field
      addField(currentField, currentLabel, l, index); 
//      currentField.addActionListener(new IntCheckAction(this));
      
      JCheckBox labCheck = new JCheckBox("Has Lab");              // check box to see if you have lab in that class
      labCheck.setActionCommand("lab");
      labCheck.addActionListener(this);
      add(labCheck);
      l.putConstraint(SpringLayout.WEST, labCheck, gap*2, SpringLayout.EAST, currentField);
      setNorthBound(labCheck);
      if (debug)
         System.out.println("slot "+slotNumber+"componentSize:"+getComponents().length);
      
      if (removable) {
         JButton remove = new JButton("remove");                     //button to remove
         remove.setActionCommand("remove");
         remove.addActionListener(this);
         setNorthBound(remove);
         l.putConstraint(SpringLayout.WEST, remove, gap*2, SpringLayout.EAST, labCheck);
         add(remove);
      }
   }
   
   private void addField(JTextField f, JComponent c, SpringLayout l, int index) {
      add(f);   
      promptFields[index] = f;  
      l.putConstraint(SpringLayout.WEST, f, gap, SpringLayout.EAST, c);
      setNorthBound(f);
   }
   
   private void addLabel(JLabel f, JComponent c, SpringLayout l, int index) {
      add(f);   
//      promptLabels[index] = f;
      l.putConstraint(SpringLayout.WEST, f, gap, SpringLayout.EAST, c);
      setNorthBound(f);
   }
   
   private void setNorthBound(JComponent c) {
      int vgap = (c instanceof JTextField || c instanceof JCheckBox || c instanceof JButton) ? gap : gap*2;
      ((SpringLayout) getLayout()).putConstraint(SpringLayout.NORTH, c, vgap, SpringLayout.NORTH, this);
   }
   //TODO
   public void showError() {
      error = true;
      
   }
  //TODO
   public void resolveError() {
      if (error) {
         
      }
   }
  
   public ClassPeriod createClass() {
      if (canCreate) {
         resolveError();
         if (hasParent && hasLab) {
            ((ScheduleInput) parentPanel).addLab(slotNumber);
            if (debug)
               System.out.println("\tslot" +slotNumber +"Added lab");
         }
         ClassPeriod retval = new ClassPeriod(slotNumber, promptFields[0].getText(), promptFields[1].getText(), 
               promptFields[2].getText());
         if (debug)
            System.out.println("created:"+retval.getInfo());
         return retval;
      }
      showError();
      return new ClassPeriod();
   }
   
   public void setLab(boolean hasLab) {
      ((JCheckBox)getComponents()[getComponents().length-1]).setSelected(hasLab);
      this.hasLab = hasLab;
   }
   
   public String toString() {
      return getClass().getName()+"[slot="+slotNumber+", lab="+hasLab+"]";
   }
   public int getSlotNumber() {
      return slotNumber;
   }
   public void setSlotNumber(int slotNumber) {
      this.slotNumber = slotNumber;
   }
   public boolean canCreate() {
      return canCreate;
   }
   public void setCanCreate(boolean canCreate) {
      this.canCreate = canCreate;
   }
   public boolean isRemovable() {
      return removable;
   }
   public void setRemovable(boolean removable) {
      this.removable = removable;
   }
   
   private static void createAndShowGUI() {
      JFrame frame = new JFrame("INFO SLOT TEST");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      frame.getContentPane().add(new ClassInputSlot(1, frame.getContentPane()));
      frame.pack();
      frame.setLocationRelativeTo(null);
      frame.setVisible(true);   
   }
   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            createAndShowGUI();
         }
      });
   }

   @Override
   public void actionPerformed(ActionEvent e) {
      if (((AbstractButton) e.getSource()).getActionCommand().equals("remove")) {
//         parentPanel.remove(this);
         if (hasParent)
            ((ScheduleInput) parentPanel).removeClassAndReOrder(slotNumber, this);
         else
            parentPanel.remove(this);
      }
      else if (((AbstractButton) e.getSource()).getActionCommand().equals("lab")) {
         hasLab = !hasLab;
         if (debug)
            System.out.println(slotNumber+" has lab");
      }
      else
         System.out.println("THIS IS WHERE U GO");
      parentPanel.repaint();
   }


}
